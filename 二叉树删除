function Node(data,left,right){
	this.data=data 
	this.left=left 
	this.right=right 
	this.show=show 

}
function show(){
	return this.data 
}
function BST(){
	this.root=null 
	this.insert = insert
	this.inOder=inOder
	this.getMin=getMin
	this.getMax=getMax
	this.find = find
	this.remove=remove 
	this.removeNode=removeNode

}
function insert(data){
	var n = new Node(data,null,null)
	if(this.root==null){
		this.root = n 
	}else{
		var current = this.root 
		var parent 
		while(true){
			parent = current 
			if (data<current.data){
				current = current.left 
				if (current==null){
					parent.left = n 
					break
				}
			}
			else{
				0
				current =current.right 
				if(current==null){
					parent.right=n 
					break
				}
			}
		}
	}
}
//中序
function inOder(node){
	if(!(node==null)){
		inOder(node.left)
		console.log(node.show())//console.log(node.data)


		inOder(node.right)
	}
}

function getMin(){
	var current =this.root 
	while (!(current.left == null)){
		current = current.left 
	}
	return current.data
}
function getMax(){
	var current =this.root 
	while (!(current.right == null)){
		current = current.right 
	}
	return current.data
}
//返回节点 没有返回空
function find(data){
	var current = this.root 
	while(current!=null){
		if(current.data==data){
			return current
		}
		else if(data<current.data){
			current =current.left 

		}
		else{
			current = current.right
		}
		
	}
	return null
}
//测试开始中序
//删除节点
function remove(data){
	root = removeNode(this.root,data)
}
var getSmallest=function(node){ //如果存在左右两个节点的话查找右节点的最小节点
    if(node){
        while(node&&node.left!=null){
            node=node.left
        }
        return node;
    }
    return null
}

function removeNode(node,data){
	if(node==null){
		return null
	}
	if(data==node.data){
		if(node.left==null &&node.right==null){
		return null 

		}
		if(node.left==null){
		return node.right
		}
		if(node.right==null){
		return node.left
		}
		var tempNode = getSmallest(node.right)
		node.data = tempNode.data  
		node.right = removeNode(node.right,tempNode.data)
		return node
	}
	else if (data<node.data){
		node.left = removeNode(node.left,data)
		return node 
	}else{
		node.right = removeNode(node.right,data)
		return node
	}
	

}


var nums = new BST()
nums.insert(23)
nums.insert(45)
nums.insert(16)
nums.insert(37)
nums.insert(3)
nums.insert(99)
nums.insert(22)
inOder(nums.root)
// n1=nums.getMin()
// console.log(n1)
// n2=nums.getMax()
// console.log(n2)
// n3=nums.find(23)
// console.log(n3)   
console.log('------------')

nums.remove(45) 
inOder(nums.root)
