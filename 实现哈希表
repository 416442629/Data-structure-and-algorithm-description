function HashTable(){
	this.table = new Array(137)
	this.simpleHash=simpleHash 
	this.showDistro=showDistro 
	this.put=put 
	//this.get=get 

}
// function simpleHash(data){//有散列碰撞的算法
// 	var total = 0
// 	for(var i = 0;i<data.length;++i){
// 		total+=data.charCodeAt(i)
// 	}
// 	console.log('数据哈希之前：'+data+'数据哈希之后：'+total+'数据哈希取余之后：'+total % this.table.length) 
// 	return total % this.table.length

// }
function simpleHash(data){//乘以质数解决散列碰撞
	var total = 0
	const H = 37
	for(var i = 0;i<data.length;++i){
		total=H*total+data.charCodeAt(i)
	}

	console.log('数据哈希之前：'+data+'数据哈希之后：'+total+'数据哈希取余之后：'+total % this.table.length) 
	total =total % this.table.length
	if(total<0){
	total +=this.table.length-1
	}
	return parseInt(total)

}
function put(data){
	var pos = this.simpleHash(data)
	this.table[pos] = data 
}
function showDistro(){
	var n = 0 
	for (var i=0;i<this.table.length;++i){
		if(this.table[i]!=undefined){
			console.log(i+':'+this.table[i])
		}
		
	}
}
var someNames=['dvdies','xsxsx','wwewe','ffdfdf','sasdasd','yyrrrf','opopopo']
var hTable = new HashTable()
for (var i =0 ; i<someNames.length;++i){
	hTable.put(someNames[i])
}
hTable.showDistro()
